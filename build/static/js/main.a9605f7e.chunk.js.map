{"version":3,"sources":["features/appSlice.js","component/SidebarChannel.js","features/userSlice.js","firebase.js","component/Sidebar.js","component/ChatHeader.js","component/Message.js","component/Chat.js","component/Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["appSlice","createSlice","name","initialState","channelId","channelName","reducers","setChannelInfo","state","action","payload","actions","selectedChaneId","app","selectedChanelName","SidebarChannel","id","dispatch","useDispatch","className","onClick","console","log","userSlice","user","login","logout","selectUser","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Sidebar","useSelector","useState","channels","setChannels","useEffect","collection","onSnapshot","snapshot","docs","map","doc","data","e","prompt","add","channel","fontSize","Avatar","signOut","src","photo","displayName","uid","substring","ChatHeader","type","placeholder","Message","timestamp","message","Date","toDate","toUTCString","Chat","input","setInput","messages","setMessages","orderBy","value","disabled","onChange","target","preventDefault","FieldValue","serverTimestamp","Login","history","useHistory","alt","Button","signInWithPopup","then","push","catch","error","App","onAuthStateChanged","authUser","photoURL","email","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a9605f7e.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const appSlice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        channelId: null,\r\n        channelName: null\r\n    },\r\n    reducers: {\r\n        setChannelInfo: (state, action) => {\r\n            state.channelId = action.payload.channelId;\r\n            state.channelName = action.payload.channelName;\r\n        }\r\n    }\r\n});\r\n\r\nexport const { setChannelInfo } = appSlice.actions;\r\n\r\nexport const selectedChaneId = (state) => state.app.channelId;\r\nexport const selectedChanelName = (state) => state.app.channelName;\r\n\r\nexport default appSlice.reducer;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport '../css/sidebarChannel.css'\r\nimport { setChannelInfo } from '../features/appSlice';\r\n\r\nconst SidebarChannel = ({ id, channelName }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className=\"sidebarChannel\" onClick={() => dispatch(setChannelInfo({\r\n            channelId: id,\r\n            channelName: channelName,\r\n        }))}>\r\n            <h4>\r\n                <span className=\"sidebarChannel__hash\">#</span>\r\n                {channelName}\r\n                {console.log(channelName)}\r\n            </h4>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SidebarChannel ","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import firebase from 'firebase'\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCSs-OuVMrPPlo7aqJusbIPgA66FsywJVw\",\r\n    authDomain: \"discord-clone-84016.firebaseapp.com\",\r\n    databaseURL: \"https://discord-clone-84016.firebaseio.com\",\r\n    projectId: \"discord-clone-84016\",\r\n    storageBucket: \"discord-clone-84016.appspot.com\",\r\n    messagingSenderId: \"613028618800\",\r\n    appId: \"1:613028618800:web:c1bc1af4613c44947903f5\",\r\n    measurementId: \"G-0MGYF41JXV\"\r\n}\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebase.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nconsole.log(provider)\r\n\r\nexport { auth, provider };\r\nexport default db","import React, { useState, useEffect } from 'react';\r\nimport '../css/sidebar.css'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport SidebarChannel from './SidebarChannel'\r\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt';\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\r\nimport CallIcon from '@material-ui/icons/Call'\r\nimport { Avatar } from '@material-ui/core'\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport HeadsetIcon from '@material-ui/icons/Headset'\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from '../features/userSlice'\r\nimport { auth } from '../firebase';\r\nimport db from '../firebase'\r\n\r\n\r\nconst Sidebar = () => {\r\n    const user = useSelector(selectUser);\r\n    { console.log(user) }\r\n    const [channels, setChannels] = useState();\r\n\r\n    useEffect(() => {\r\n        db.collection('channels').onSnapshot(snapshot => {\r\n            setChannels(snapshot.docs.map((doc) => { return { ...doc.data(), id: doc.id } })\r\n            )\r\n        })\r\n        console.log(channels)\r\n    }, []);\r\n\r\n    const handleAddChannel = (e) => {\r\n        const channelName = prompt('Enter a new channel name');\r\n\r\n        if (channelName) {\r\n            db.collection('channels').add({\r\n                channelName: channelName,\r\n            })\r\n            console.log(channels)\r\n        }\r\n    }\r\n\r\n    return (\r\n        // <div style={{ maxHeight: '100vh !mportant' }} >\r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebar__top\">\r\n                <h2>Ace Dev</h2>\r\n                <ExpandMoreIcon />\r\n            </div>\r\n\r\n            <div className=\"sidebar__channels\">\r\n                <div className=\"sidebar__channelsHeader\">\r\n                    <div className=\"sidebar__header\">\r\n                        <ExpandMoreIcon />\r\n                        <h4> Add Channel</h4>\r\n                    </div>\r\n\r\n                    <AddIcon onClick={handleAddChannel} className='sidebar__addChannel' />\r\n                </div>\r\n\r\n                <div className=\"sidebar__channelList\">\r\n\r\n                    {channels?.map((channel) => (\r\n                        <SidebarChannel channelName={channel.channelName} id={channel.id} key={channel.id} />\r\n                    ))}\r\n\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"sidebar__voice\">\r\n                <SignalCellularAltIcon\r\n                    className=\"sidebar__voiceIcon\"\r\n                    fontSize=\"large\"\r\n                />\r\n                <div className=\"sidebar__voiceInfo\">\r\n                    <h3>Voice Connected</h3>\r\n                    <p>Stream</p>\r\n                </div>\r\n\r\n                <div className=\"sidebar__voiceIcons\">\r\n                    <InfoOutlinedIcon />\r\n                    <CallIcon />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"sidebar__profile\">\r\n\r\n                <Avatar onClick={() => auth.signOut()} src={user?.photo} />\r\n\r\n                <div className=\"sidebar__profileInfo\">\r\n                    <h3> {user?.displayName} </h3>\r\n                    <p>#{user?.uid.substring(0, 5)}</p>\r\n                </div>\r\n\r\n                <div className=\"sidebar__profileIcons\">\r\n                    <MicIcon />\r\n                    <HeadsetIcon />\r\n                    <SettingsIcon />\r\n                </div>\r\n            </div>\r\n        </div>\r\n        // </div >\r\n    );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React from 'react';\r\nimport '../css/chatheader.css'\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport EditLocationIcon from '@material-ui/icons/EditLocation'\r\nimport PeopleAltRoundedIcon from '@material-ui/icons/PeopleAltRounded'\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport HelpRoundedIcon from '@material-ui/icons/HelpOutlined'\r\n\r\nconst ChatHeader = ({ channelName }) => {\r\n    return (\r\n        <div className=\"chatHeader\">\r\n            <div className=\"chatHeader__left\">\r\n                <h3>\r\n                    <span className=\"chatHeader__hash\">#\r\n                        {channelName}\r\n                    </span>\r\n                </h3>\r\n            </div>\r\n            <div className=\"chatHeader__right\">\r\n                <NotificationsIcon />\r\n                <EditLocationIcon />\r\n                <PeopleAltRoundedIcon />\r\n            </div>\r\n\r\n            <div className=\"chatHeader__search\">\r\n                <input type=\"text\" placeholder='Search' />\r\n                <SearchRoundedIcon />\r\n                <HelpRoundedIcon />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatHeader;\r\n","import React from 'react';\r\nimport '../css/message.css'\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\n\r\nconst Message = ({ timestamp, user, message, photo }) => {\r\n    return (\r\n        <div className=\"message\">\r\n            <Avatar src={photo} />\r\n            <div className=\"message__info\">\r\n                <h4> {user}\r\n                    <span className=\"message__timestamp\">\r\n                        {new Date(timestamp?.toDate()).toUTCString()}\r\n                    </span>\r\n                </h4>\r\n\r\n                <p>{message}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message;\r\n","import React, { useState, useEffect } from 'react';\r\nimport '../css/chat.css'\r\nimport ChatHeader from './ChatHeader'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\r\nimport CardGiftcardIcon from '@material-ui/icons/CardGiftcard'\r\nimport GifIcon from '@material-ui/icons/Gif'\r\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions'\r\nimport Message from './Message'\r\nimport { useSelector } from 'react-redux';\r\nimport { selectedChaneId, selectedChanelName } from '../features/appSlice';\r\nimport { selectUser } from '../features/userSlice'\r\nimport db from '../firebase'\r\nimport firebase from 'firebase'\r\n\r\n\r\nconst Chat = () => {\r\n    const channelId = useSelector(selectedChaneId);\r\n    const user = useSelector(selectUser);\r\n    const channelName = useSelector(selectedChanelName)\r\n    const [input, setInput] = useState(\"\");\r\n    const [messages, setMessages] = useState();\r\n\r\n    useEffect(() => {\r\n        if (channelId) {\r\n            db.collection('channels').doc(channelId)\r\n                .collection('messages')\r\n                .orderBy('timestamp', 'desc')\r\n                .onSnapshot((snapshot) => {\r\n                    setMessages(snapshot.docs.map((doc) => doc.data()))\r\n                });\r\n        }\r\n    }, [channelId]);\r\n\r\n\r\n\r\n    const sendMessages = e => {\r\n        e.preventDefault();\r\n\r\n        db.collection('channels').doc(channelId).collection('messages').add(\r\n            {\r\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                message: input,\r\n                user: user.displayName,\r\n            }\r\n        );\r\n\r\n        setInput('');\r\n    }\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <ChatHeader channelName={channelName} />\r\n\r\n            <div className=\"chat__messages\">\r\n                {messages?.map((message) => (\r\n                    <Message\r\n                        timestamp={message.timestamp}\r\n                        message={message.message}\r\n                        user={message.user}\r\n                        photo={user.photo}\r\n                    />\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"chat__input\">\r\n                <AddCircleIcon fontSize=\"large\" />\r\n                <form  >\r\n                    <input\r\n                        value={input}\r\n                        disabled={!channelId}\r\n                        onChange={(e) => setInput(e.target.value)}\r\n                        type=\"text\" placeholder={`Message #${channelName}`}\r\n                    />\r\n                    <button onClick={sendMessages} className=\"chat__inputButton\" type='submit'>\r\n                        Send Message\r\n                    </button>\r\n                </form>\r\n\r\n                <div className=\"chat__inputActions\">\r\n                    <CardGiftcardIcon fontSize=\"large\" />\r\n                    <GifIcon fontSize=\"large\" />\r\n                    <EmojiEmotionsIcon fontSize=\"large\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;\r\n","import React from 'react';\r\nimport '../css/login.css'\r\nimport { Button } from '@material-ui/core'\r\nimport { auth, provider } from '../firebase'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst Login = () => {\r\n    const history = useHistory();\r\n\r\n    const signIn = () => {\r\n        auth.signInWithPopup(provider).then(\r\n            history.push('/ace-dev/chat')\r\n        ).catch(error => console.log(error.message))\r\n    }\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <h2 > 🤷‍♀️🤷‍♀️</h2>\r\n            <div className='login__logo'>\r\n                <img src=\"https://upload.wikimedia.org/wikipedia/sco/thumb/9/98/Discord_logo.svg/800px-Discord_logo.svg.png\"\r\n                    alt=\"discord__logo\" />\r\n            </div>\r\n\r\n            <Button onClick={signIn} > Sign In</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport Sidebar from './component/Sidebar'\r\nimport Chat from './component/Chat'\r\nimport { selectUser } from './features/userSlice'\r\nimport Login from './component/Login'\r\nimport { auth } from './firebase'\r\nimport { login, logout } from './features/userSlice'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\n\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(selectUser);\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser) => {\r\n      if (authUser) {\r\n        // logged in the user\r\n        dispatch(login({\r\n          uid: authUser.uid,\r\n          photo: authUser.photoURL,\r\n          email: authUser.email,\r\n          displayName: authUser.displayName\r\n        }))\r\n      } else {\r\n        // logout user\r\n        dispatch(logout())\r\n      }\r\n    })\r\n  }, [dispatch]);\r\n\r\n  return (\r\n\r\n    <div className=\"app\">\r\n      { user ? (\r\n        <>\r\n          <Sidebar />\r\n          <Chat />\r\n        </>\r\n      ) :\r\n        <Login />\r\n      }\r\n\r\n\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\nimport appReducer from '../features/appSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    app: appReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Login from './component/Login'\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <Provider store={store}>\r\n\r\n        <Switch>\r\n          <Route exact path='/' component={Login} />\r\n          <Route exact path='/ace-dev/chat' component={App}></Route>\r\n        </Switch>\r\n      </Provider>\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}